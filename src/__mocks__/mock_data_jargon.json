[
  {
    "name": "MOCK DATA 1",
    "description": "a technology for asynchronous HTTP requests",
    "markdown": "\n\n# Ajax\n\n[Ajax](https://developer.mozilla.org/en-US/docs/AJAX) is a technique for creating seamless interactive websites via asynchronous data exchange between client and server. Ajax facilitates communication with the server via partial page updates instead of the traditional full-page refresh.\n",
    "html": "<h1 id=\"ajax\">Ajax</h1>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/AJAX\">Ajax</a> is a technique for creating seamless interactive websites via asynchronous data exchange between client and server. Ajax facilitates communication with the server via partial page updates instead of the traditional full-page refresh.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/AJAX.md"
  },
  {
    "name": "MOCK DATA 2",
    "description": "a standard defining how to load JavaScript libraries or modules asynchronously",
    "markdown": "\n\n# AMD\n\n[AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) stands for Asynchronous Module Definition. It is an alternative to [CommonJS (CJS)](/_glossary/COMMONJS.md) specification.\n\nThe API specifies a mechanism for defining modules such that the module and its dependencies can be asynchronously loaded. This is particularly well suited for the browser environment where synchronous loading of modules incurs performance, usability, debugging, and cross-domain access problems.\n\nAMD libraries expose a global `define` function whose footprint is\n\n```js\ndefine(modulename?,[dependencyA?, dependencyB?, …], function (objectA, objectB, …) {\n...\n    var myExportedObj = function() { … }\n    return myExportedObj;\n\n});\n```\n\nWhere\n\n- `modulename` is an optional string parameter to explicitly declare the id of the current module\n- `dependencyA`, `dependencyB` and so on, are the dependencies for the current module\n- `function(objectA, objectB) {...}` is a factory whose arguments are the exported objects of each dependency.\n- `myExportedObj` an optional return value (since a module might be just adding methods to an existing object) but, if declared, it would be this module’s exported object, which other modules would get if they list `modulename` among their dependencies.\n\nAside from the global `define` function, an AMD compliant library must have a `define.amd` property whose value is an object. Checking for the existence of both `define` and `define.amd` in the global scope allows any script to verify it is being called from an AMD loader.\n\nExamples of libraries providing AMD loading capabilities are:\n\n- [RequireJS](/_glossary/REQUIREJS.md) written by Mozilla’s [James Burke](https://github.com/jrburke/). One of the first ones to become widely used and still the most popular. It provides a limited interoperability with [CommonJS](/_glossary/COMMONJS.md) modules too.\n- [CurlJS](https://github.com/cujojs/curl) part of the [CujoJS Framework](http://cujojs.com/). CurlJS is less popular than RequireJS and is receiving only maintenance updates, no new features since 2014.\n- [Alameda](https://github.com/requirejs/alameda) also made by James Burke, it’s like RequireJS but using promises to manage the completion events.\n- [Cajon](https://github.com/requirejs/cajon) also made by James Burke, it’s like a decorator for RequireJS that replaces the `load` method to fetch dependencies through [AJAX](/_glossary/AJAX.md) calls.\n- [SystemJS](https://github.com/systemjs/systemjs) by [Guy Bedford](https://github.com/guybedford) who, until a couple of years ago, was one of the most active plugin developers for RequireJS. SystemJS can load AMD, CommonJS and [ES6](/_glossary/ECMASCRIPT.md) modules seamlessly and is mostly used in combination with [jspm](http://jspm.io/), which acts as a dependency manager (not unlike [Bower](/_glossary/BOWER.md)) leveraging in Github and [npm](/_glossary/NPM.md).\n\nAll these libraries allow for the developer to preview a project without any build step, requesting the dependencies asynchronously. There’s usually an optional (but reccomended) build or bundling step for production deploys, in order to minify the code and minimize the number of requests in order to enhance load times. Allegedly, the coming of [HTTP2](https://http2.github.io/) support in browsers and webservers should eliminate the need for extra requests when loading dependencies asynchronously, thus eliminating the need of a build step.\n\nOther libraries that can’t load dependencies asynchronously but can include AMD modules in their build workflow, are, for example:\n\n- [Webpack](/_glossary/WEBPACK.md)\n- [Rollup](http://rollupjs.org/)\n- [StealJS](http://stealjs.com/)\n",
    "html": "<h1 id=\"amd\">AMD</h1>\n<p><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD</a> stands for Asynchronous Module Definition. It is an alternative to <a href=\"/_glossary/COMMONJS.md\">CommonJS (CJS)</a> specification.</p>\n<p>The API specifies a mechanism for defining modules such that the module and its dependencies can be asynchronously loaded. This is particularly well suited for the browser environment where synchronous loading of modules incurs performance, usability, debugging, and cross-domain access problems.</p>\n<p>AMD libraries expose a global <code>define</code> function whose footprint is</p>\n<pre><code class=\"lang-js\">define(modulename?,[dependencyA?, dependencyB?, …], function (objectA, objectB, …) {\n...\n    var myExportedObj = function() { … }\n    return myExportedObj;\n\n});\n</code></pre>\n<p>Where</p>\n<ul>\n<li><code>modulename</code> is an optional string parameter to explicitly declare the id of the current module</li>\n<li><code>dependencyA</code>, <code>dependencyB</code> and so on, are the dependencies for the current module</li>\n<li><code>function(objectA, objectB) {...}</code> is a factory whose arguments are the exported objects of each dependency.</li>\n<li><code>myExportedObj</code> an optional return value (since a module might be just adding methods to an existing object) but, if declared, it would be this module’s exported object, which other modules would get if they list <code>modulename</code> among their dependencies.</li>\n</ul>\n<p>Aside from the global <code>define</code> function, an AMD compliant library must have a <code>define.amd</code> property whose value is an object. Checking for the existence of both <code>define</code> and <code>define.amd</code> in the global scope allows any script to verify it is being called from an AMD loader.</p>\n<p>Examples of libraries providing AMD loading capabilities are:</p>\n<ul>\n<li><a href=\"/_glossary/REQUIREJS.md\">RequireJS</a> written by Mozilla’s <a href=\"https://github.com/jrburke/\">James Burke</a>. One of the first ones to become widely used and still the most popular. It provides a limited interoperability with <a href=\"/_glossary/COMMONJS.md\">CommonJS</a> modules too.</li>\n<li><a href=\"https://github.com/cujojs/curl\">CurlJS</a> part of the <a href=\"http://cujojs.com/\">CujoJS Framework</a>. CurlJS is less popular than RequireJS and is receiving only maintenance updates, no new features since 2014.</li>\n<li><a href=\"https://github.com/requirejs/alameda\">Alameda</a> also made by James Burke, it’s like RequireJS but using promises to manage the completion events.</li>\n<li><a href=\"https://github.com/requirejs/cajon\">Cajon</a> also made by James Burke, it’s like a decorator for RequireJS that replaces the <code>load</code> method to fetch dependencies through <a href=\"/_glossary/AJAX.md\">AJAX</a> calls.</li>\n<li><a href=\"https://github.com/systemjs/systemjs\">SystemJS</a> by <a href=\"https://github.com/guybedford\">Guy Bedford</a> who, until a couple of years ago, was one of the most active plugin developers for RequireJS. SystemJS can load AMD, CommonJS and <a href=\"/_glossary/ECMASCRIPT.md\">ES6</a> modules seamlessly and is mostly used in combination with <a href=\"http://jspm.io/\">jspm</a>, which acts as a dependency manager (not unlike <a href=\"/_glossary/BOWER.md\">Bower</a>) leveraging in Github and <a href=\"/_glossary/NPM.md\">npm</a>.</li>\n</ul>\n<p>All these libraries allow for the developer to preview a project without any build step, requesting the dependencies asynchronously. There’s usually an optional (but reccomended) build or bundling step for production deploys, in order to minify the code and minimize the number of requests in order to enhance load times. Allegedly, the coming of <a href=\"https://http2.github.io/\">HTTP2</a> support in browsers and webservers should eliminate the need for extra requests when loading dependencies asynchronously, thus eliminating the need of a build step.</p>\n<p>Other libraries that can’t load dependencies asynchronously but can include AMD modules in their build workflow, are, for example:</p>\n<ul>\n<li><a href=\"/_glossary/WEBPACK.md\">Webpack</a></li>\n<li><a href=\"http://rollupjs.org/\">Rollup</a></li>\n<li><a href=\"http://stealjs.com/\">StealJS</a></li>\n</ul>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/AMD.md"
  },
  {
    "name": "AngularJS",
    "description": "a structural framework for dynamic web apps",
    "markdown": "\n\n# AngularJS\n\n[AngularJS](https://angularjs.org/) is a structural framework for dynamic web apps. It lets developers use HTML as their template language and lets them extend HTML’s syntax to express their application’s components clearly and succinctly.\n\nAngular’s data binding and dependency injection eliminate much of the code developers would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.\n",
    "html": "<h1 id=\"angularjs\">AngularJS</h1>\n<p><a href=\"https://angularjs.org/\">AngularJS</a> is a structural framework for dynamic web apps. It lets developers use HTML as their template language and lets them extend HTML’s syntax to express their application’s components clearly and succinctly.</p>\n<p>Angular’s data binding and dependency injection eliminate much of the code developers would otherwise have to write. And it all happens within the browser, making it an ideal partner with any server technology.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/ANGULARJS.md"
  },
  {
    "name": "Apache Cordova",
    "description": "a popular mobile application development framework originally created by Nitobi",
    "markdown": "\n\n# PhoneGap\n\n[Apache Cordova](http://phonegap.com/) (formerly **PhoneGap**) is a popular mobile application development framework originally created by Nitobi. Adobe Systems purchased Nitobi in 2011, rebranded it as PhoneGap, and later released an open source version of the software called Apache Cordova. Apache Cordova enables software programmers to build applications for mobile devices using JavaScript, HTML5, and CSS3, instead of relying on platform-specific APIs like those in Android, iOS, or Windows Phone. It enables wrapping up of CSS, HTML, and JavaScript code depending upon the platform of the device. It extends the features of HTML and JavaScript to work with the device. The resulting applications are hybrid, meaning that they are neither truly native mobile application (because all layout rendering is done via Web views instead of the platform’s native UI framework) nor purely Web-based (because they are not just Web apps, but are packaged as apps for distribution and have access to native device APIs). Mixing native and hybrid code snippets has been possible since version 1.9.\n\nThe software was previously called just “PhoneGap”, then “Apache Callback”. As open-source software, Apache Cordova allows wrappers around it, such as Intel XDK or Appery.io.\n\nPhoneGap is Adobe’s productized version and ecosystem on top of Cordova. Like PhoneGap, many other tools and frameworks are also built on top of Cordova, including Ionic, the Intel XDK, Monaca, TACO, and the Telerik Platform. These tools use Cordova, and not PhoneGap for their core tools.\n\nContributors to the Apache Cordova project include Adobe, IBM, Google, Microsoft, Intel, BlackBerry, Mozilla, and others.\n\n## History\n\nFirst developed at an iPhoneDevCamp event in San Francisco, PhoneGap went on to win the People’s Choice Award at O’Reilly Media’s 2009 Web 2.0 Conference, and the framework has been used to develop many apps. Apple Inc. has confirmed that the framework has its approval, even with the new 4.0 developer license agreement changes. The PhoneGap framework is used by several mobile application platforms such as Asial’s Monaca, ViziApps, Worklight, Convertigo, and appMobi as the backbone of their mobile client development engine.\n\nAdobe officially announced the acquisition of Nitobi Software (the original developer) on October 4, 2011. Coincident with that, the PhoneGap code was contributed to the Apache Software Foundation to start a new project called Apache Cordova. The project’s original name, Apache Callback, was viewed as too generic. Then it also appears in Adobe Systems as Adobe PhoneGap and also as Adobe Phonegap Build.\n\nEarly versions of PhoneGap required an Apple computer to create iOS apps and a Windows computer to create Windows Mobile apps. After September 2012, Adobe’s PhoneGap Build service allows programmers to upload HTML, CSS, and JavaScript source code to a “cloud compiler” that generates apps for every supported platform.\n\n## Design and rationale\n\nThe core of Apache Cordova applications use HTML5 and CSS3 for their rendering and JavaScript for their logic. HTML5 now provides access to underlying hardware such as the accelerometer, camera, and GPS. However, browser support for HTML5-based device access is not consistent across mobile browsers, particularly older versions of Android. To overcome these limitations, Apache Cordova embeds HTML5 code inside a native WebView on the device, using a foreign function interface to access the native resources of the device.\n\nApache Cordova can be extended with native plug-ins that allow for developers to add functionality that can be called from JavaScript, allowing for direct communication between the native layer and the HTML5 page. Apache Cordova includes basic plugins that allow access to the device’s accelerometer, camera, microphone, compass, file system, and more.\n\nHowever, the use of Web-based technologies leads some Apache Cordova applications to run slower than native applications with similar functionality. Adobe Systems warns that applications may be rejected by Apple for being too slow or not feeling “native” enough (having appearance and functionality consistent with what users have come to expect on the platform). This can be an issue for some Apache Cordova applications.\n\n## Supported platforms\n\nAs of January 2016, Apache Cordova currently supports development for the operating systems Apple iOS, BlackBerry, Google Android, LG webOS, Microsoft Windows Phone (7 and 8), Nokia Symbian OS, Tizen (SDK 2.x), Bada, Firefox OS, and Ubuntu Touch. The table below is a list of supported features for each operating system.\n\n| Feature | iPhone | Android | Windows Phone | BlackBerry OS | Bada | Symbian | Tizen |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| Accelerometer | Yes | Yes | Yes | 5.0+ | Yes | Yes | Yes |\n| Camera | Yes | Yes | Yes | 5.0+ | Yes | Yes | Yes |\n| Compass | 3GS+ | Yes | Yes | 10+ | Yes | **N/A** | Yes |\n| Contacts | Yes | Yes | Yes | 5.0+ | Yes | Yes | Yes |\n| File | Yes | Yes | Yes | 5.0+ | Yes | **N/A** | Yes |\n| Geolocation | Yes | Yes | Yes | Yes | Yes | Yes | Yes |\n| Media | Yes | Yes | Yes | 10+ | **N/A** | **N/A** | Yes |\n| Network | Yes | Yes | Yes | Yes | Yes | Yes | Yes |\n| Notification | Yes | Yes | Yes | Yes | Yes | Yes | Yes |\n| Storage | Yes | Yes | Yes | 5.0+ | **N/A** | Yes | Yes |\n\n----------\n\n*Source:*\n\n- [Apache Cordova](https://en.wikipedia.org/wiki/Apache_Cordova)*. From Wikipedia, the free encyclopedia*\n",
    "html": "<h1 id=\"phonegap\">PhoneGap</h1>\n<p><a href=\"http://phonegap.com/\">Apache Cordova</a> (formerly <strong>PhoneGap</strong>) is a popular mobile application development framework originally created by Nitobi. Adobe Systems purchased Nitobi in 2011, rebranded it as PhoneGap, and later released an open source version of the software called Apache Cordova. Apache Cordova enables software programmers to build applications for mobile devices using JavaScript, HTML5, and CSS3, instead of relying on platform-specific APIs like those in Android, iOS, or Windows Phone. It enables wrapping up of CSS, HTML, and JavaScript code depending upon the platform of the device. It extends the features of HTML and JavaScript to work with the device. The resulting applications are hybrid, meaning that they are neither truly native mobile application (because all layout rendering is done via Web views instead of the platform’s native UI framework) nor purely Web-based (because they are not just Web apps, but are packaged as apps for distribution and have access to native device APIs). Mixing native and hybrid code snippets has been possible since version 1.9.</p>\n<p>The software was previously called just “PhoneGap”, then “Apache Callback”. As open-source software, Apache Cordova allows wrappers around it, such as Intel XDK or Appery.io.</p>\n<p>PhoneGap is Adobe’s productized version and ecosystem on top of Cordova. Like PhoneGap, many other tools and frameworks are also built on top of Cordova, including Ionic, the Intel XDK, Monaca, TACO, and the Telerik Platform. These tools use Cordova, and not PhoneGap for their core tools.</p>\n<p>Contributors to the Apache Cordova project include Adobe, IBM, Google, Microsoft, Intel, BlackBerry, Mozilla, and others.</p>\n<h2 id=\"history\">History</h2>\n<p>First developed at an iPhoneDevCamp event in San Francisco, PhoneGap went on to win the People’s Choice Award at O’Reilly Media’s 2009 Web 2.0 Conference, and the framework has been used to develop many apps. Apple Inc. has confirmed that the framework has its approval, even with the new 4.0 developer license agreement changes. The PhoneGap framework is used by several mobile application platforms such as Asial’s Monaca, ViziApps, Worklight, Convertigo, and appMobi as the backbone of their mobile client development engine.</p>\n<p>Adobe officially announced the acquisition of Nitobi Software (the original developer) on October 4, 2011. Coincident with that, the PhoneGap code was contributed to the Apache Software Foundation to start a new project called Apache Cordova. The project’s original name, Apache Callback, was viewed as too generic. Then it also appears in Adobe Systems as Adobe PhoneGap and also as Adobe Phonegap Build.</p>\n<p>Early versions of PhoneGap required an Apple computer to create iOS apps and a Windows computer to create Windows Mobile apps. After September 2012, Adobe’s PhoneGap Build service allows programmers to upload HTML, CSS, and JavaScript source code to a “cloud compiler” that generates apps for every supported platform.</p>\n<h2 id=\"design-and-rationale\">Design and rationale</h2>\n<p>The core of Apache Cordova applications use HTML5 and CSS3 for their rendering and JavaScript for their logic. HTML5 now provides access to underlying hardware such as the accelerometer, camera, and GPS. However, browser support for HTML5-based device access is not consistent across mobile browsers, particularly older versions of Android. To overcome these limitations, Apache Cordova embeds HTML5 code inside a native WebView on the device, using a foreign function interface to access the native resources of the device.</p>\n<p>Apache Cordova can be extended with native plug-ins that allow for developers to add functionality that can be called from JavaScript, allowing for direct communication between the native layer and the HTML5 page. Apache Cordova includes basic plugins that allow access to the device’s accelerometer, camera, microphone, compass, file system, and more.</p>\n<p>However, the use of Web-based technologies leads some Apache Cordova applications to run slower than native applications with similar functionality. Adobe Systems warns that applications may be rejected by Apple for being too slow or not feeling “native” enough (having appearance and functionality consistent with what users have come to expect on the platform). This can be an issue for some Apache Cordova applications.</p>\n<h2 id=\"supported-platforms\">Supported platforms</h2>\n<p>As of January 2016, Apache Cordova currently supports development for the operating systems Apple iOS, BlackBerry, Google Android, LG webOS, Microsoft Windows Phone (7 and 8), Nokia Symbian OS, Tizen (SDK 2.x), Bada, Firefox OS, and Ubuntu Touch. The table below is a list of supported features for each operating system.</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>iPhone</th>\n<th>Android</th>\n<th>Windows Phone</th>\n<th>BlackBerry OS</th>\n<th>Bada</th>\n<th>Symbian</th>\n<th>Tizen</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accelerometer</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5.0+</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Camera</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5.0+</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Compass</td>\n<td>3GS+</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>10+</td>\n<td>Yes</td>\n<td><strong>N/A</strong></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Contacts</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5.0+</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>File</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5.0+</td>\n<td>Yes</td>\n<td><strong>N/A</strong></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Geolocation</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Media</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>10+</td>\n<td><strong>N/A</strong></td>\n<td><strong>N/A</strong></td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Network</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Notification</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Storage</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5.0+</td>\n<td><strong>N/A</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><em>Source:</em></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Apache_Cordova\">Apache Cordova</a><em>. From Wikipedia, the free encyclopedia</em></li>\n</ul>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/APACHECORDOVA.md"
  },
  {
    "name": "Arity",
    "description": "the number of arguments of a function",
    "markdown": "\n\n# Arity\n\nArity (from Latin) is the term used to refer to the number of arguments or operands in a function or operation, respectively. You're most likely to come across this word in the realm of JavaScript when it’s used to mention the number of arguments expected by a JavaScript function.\n\nThere’s even a property named [arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity), of the `Function` object that returns the number of expected arguments in a function. It’s now obsolete though and replaced by `length`.\n\nAs an example, the following function has an arity of 3.\n\n```js\nfunction getName(first, middle, last) {\n  return first + ' ' + middle + ' ' + last;\n}\n```\n\nSource: https://gist.github.com/nucliweb/8de961282f64095b1a57.\n",
    "html": "<h1 id=\"arity\">Arity</h1>\n<p>Arity (from Latin) is the term used to refer to the number of arguments or operands in a function or operation, respectively. You&#39;re most likely to come across this word in the realm of JavaScript when it’s used to mention the number of arguments expected by a JavaScript function.</p>\n<p>There’s even a property named <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity\">arity</a>, of the <code>Function</code> object that returns the number of expected arguments in a function. It’s now obsolete though and replaced by <code>length</code>.</p>\n<p>As an example, the following function has an arity of 3.</p>\n<pre><code class=\"lang-js\">function getName(first, middle, last) {\n  return first + &#39; &#39; + middle + &#39; &#39; + last;\n}\n</code></pre>\n<p>Source: <a href=\"https://gist.github.com/nucliweb/8de961282f64095b1a57\">https://gist.github.com/nucliweb/8de961282f64095b1a57</a>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/ARITY.md"
  },
  {
    "name": "Babel",
    "description": "a JavaScript transformation toolkit which started as an ECMAScript 2015 / ES6 code translator (transpiler)",
    "markdown": "\n\n# Babel\n\n[Babel](https://babeljs.io/) (formerly *6to5*) is essentially an [ECMAScript](/_glossary/ECMASCRIPT.md) 2015 (ES6) and beyond transpiler. It means that it is a program that translates future’s JavaScript into today’s widely understood (by browsers) JavaScript. The idea behind such a tool is to allow developers to write their code using ECMAScript’s new features while still making it work in current (and past) environments.\n\nAs of [version 6](https://babeljs.io/blog/2015/10/29/6.0.0), Babel also intends to be a platform, a suite of tools designed to create the next generation of JavaScript tooling. This means Babel is also supposed to power minifiers, linters, formatters, syntax highlighters, code completion tools, type checkers, codemod tools, and every other tool to be using the same foundation to do their job better than ever before.\n",
    "html": "<h1 id=\"babel\">Babel</h1>\n<p><a href=\"https://babeljs.io/\">Babel</a> (formerly <em>6to5</em>) is essentially an <a href=\"/_glossary/ECMASCRIPT.md\">ECMAScript</a> 2015 (ES6) and beyond transpiler. It means that it is a program that translates future’s JavaScript into today’s widely understood (by browsers) JavaScript. The idea behind such a tool is to allow developers to write their code using ECMAScript’s new features while still making it work in current (and past) environments.</p>\n<p>As of <a href=\"https://babeljs.io/blog/2015/10/29/6.0.0\">version 6</a>, Babel also intends to be a platform, a suite of tools designed to create the next generation of JavaScript tooling. This means Babel is also supposed to power minifiers, linters, formatters, syntax highlighters, code completion tools, type checkers, codemod tools, and every other tool to be using the same foundation to do their job better than ever before.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BABEL.md"
  },
  {
    "name": "Backbone",
    "description": "a structural framework for dynamic web apps",
    "markdown": "\n\n# Backbone\n\n[Backbone.js](http://backbonejs.org/) is a framework giving structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to existing APIs over a RESTful [JSON](/_glossary/JSON.md) interface.\n",
    "html": "<h1 id=\"backbone\">Backbone</h1>\n<p><a href=\"http://backbonejs.org/\">Backbone.js</a> is a framework giving structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to existing APIs over a RESTful <a href=\"/_glossary/JSON.md\">JSON</a> interface.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BACKBONE.md"
  },
  {
    "name": "BEM",
    "description": "a methodology and libraries developed and used at Yandex for building user interfaces",
    "markdown": "\n\n# BEM\n\n[BEM](https://en.bem.info/) is a methodology and libraries developed and used at Yandex for building user interfaces.\n\nKey concepts of methodology\n\n * Block: logically and functionally independent page component, encapsulates behavior (JavaScript), templates, styles (CSS), and other implementation technologies\n * Element: a constituent part of a block that can’t be used outside of it (For example, a menu item)\n * Modifier: defines the appearance and behavior of a block or an element\n\nBEM methodology solves common frontend problems:\n\n 1. Component approach (splitting interface into blocks).\n 2. How to name things (in [code](https://en.bem.info/method/naming-convention/) and on [filesystem](https://en.bem.info/method/filesystem/)).\n 3. How to reuse components (for JS / CSS and all other techs) — for example you can take [bem-core](https://github.com/bem/bem-core) library (a collection of common blocks and solutions).\n 4. How to describe components behaviour — [i-bem.js](https://en.bem.info/technology/i-bem/) library that allows you describe a block logic in declarative style and keep it loosely coupled with others.\n 5. How to generate HTML — declarative template engine [bem-xjst](https://github.com/bem/bem-xjst) for server and browsers.\n 6. How to manage components dependencies and build project — [ENB](https://github.com/enb/enb) builder.\n",
    "html": "<h1 id=\"bem\">BEM</h1>\n<p><a href=\"https://en.bem.info/\">BEM</a> is a methodology and libraries developed and used at Yandex for building user interfaces.</p>\n<p>Key concepts of methodology</p>\n<ul>\n<li>Block: logically and functionally independent page component, encapsulates behavior (JavaScript), templates, styles (CSS), and other implementation technologies</li>\n<li>Element: a constituent part of a block that can’t be used outside of it (For example, a menu item)</li>\n<li>Modifier: defines the appearance and behavior of a block or an element</li>\n</ul>\n<p>BEM methodology solves common frontend problems:</p>\n<ol>\n<li>Component approach (splitting interface into blocks).</li>\n<li>How to name things (in <a href=\"https://en.bem.info/method/naming-convention/\">code</a> and on <a href=\"https://en.bem.info/method/filesystem/\">filesystem</a>).</li>\n<li>How to reuse components (for JS / CSS and all other techs) — for example you can take <a href=\"https://github.com/bem/bem-core\">bem-core</a> library (a collection of common blocks and solutions).</li>\n<li>How to describe components behaviour — <a href=\"https://en.bem.info/technology/i-bem/\">i-bem.js</a> library that allows you describe a block logic in declarative style and keep it loosely coupled with others.</li>\n<li>How to generate HTML — declarative template engine <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> for server and browsers.</li>\n<li>How to manage components dependencies and build project — <a href=\"https://github.com/enb/enb\">ENB</a> builder.</li>\n</ol>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BEM.md"
  },
  {
    "name": "Bluebird",
    "description": "a fully featured Promise library with focus on innovative features and performance",
    "markdown": "\n\n# Bluebird\n\n[Bluebird](http://bluebirdjs.com/docs/getting-started.html) is a fully featured [promise](/_glossary/PROMISE.md) library with focus on innovative features and performance. It means that it is a tool that completes and reinforces the behavior of JavaScript promises.\n",
    "html": "<h1 id=\"bluebird\">Bluebird</h1>\n<p><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Bluebird</a> is a fully featured <a href=\"/_glossary/PROMISE.md\">promise</a> library with focus on innovative features and performance. It means that it is a tool that completes and reinforces the behavior of JavaScript promises.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BLUEBIRD.md"
  },
  {
    "name": "Bower",
    "description": "a package manager for front-end dependencies",
    "markdown": "\n\n# Bower\n\n[Bower](http://bower.io/) is a package manager for front-end dependencies. It takes care of hunting, finding, downloading, saving these dependencies and keeping track of them in a manifest file called `bower.json`. Bower uses a flat dependency tree, requiring only one version for each package, reducing page load to a minimum.\n",
    "html": "<h1 id=\"bower\">Bower</h1>\n<p><a href=\"http://bower.io/\">Bower</a> is a package manager for front-end dependencies. It takes care of hunting, finding, downloading, saving these dependencies and keeping track of them in a manifest file called <code>bower.json</code>. Bower uses a flat dependency tree, requiring only one version for each package, reducing page load to a minimum.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BOWER.md"
  },
  {
    "name": "Broccoli",
    "description": "a fast and reliable asset pipeline",
    "markdown": "\n\n# Broccoli\n\n[Broccoli](https://github.com/broccolijs/broccoli) is a fast, reliable asset pipeline, supporting constant-time rebuilds and compact build definitions. Comparable to the [Rails](http://rubyonrails.org/) asset pipeline in scope, though it runs on [Node.js](/_glossary/NODEJS.md) and is backend-agnostic.\n",
    "html": "<h1 id=\"broccoli\">Broccoli</h1>\n<p><a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a> is a fast, reliable asset pipeline, supporting constant-time rebuilds and compact build definitions. Comparable to the <a href=\"http://rubyonrails.org/\">Rails</a> asset pipeline in scope, though it runs on <a href=\"/_glossary/NODEJS.md\">Node.js</a> and is backend-agnostic.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BROCCOLI.md"
  },
  {
    "name": "Browserify",
    "description": "a tool making possible to use the `require` function from Node.js within the browser",
    "markdown": "\n\n# Browserify\n\n[Browserify](http://browserify.org/) is a tool that allows you to use the [require](https://nodejs.org/api/modules.html) [Node.js](/_glossary/NODEJS.md) function while working for the browser by bundling up all the required dependencies. \n\nThe idea behind Browserify is to make it possible to use existing libraries from [npm](/_glossary/NPM.md) even when writing code for the client side. To allow this, it goes through the code, request the required dependencies, then create a single file containing everything: both the dependencies and the code using them.\n",
    "html": "<h1 id=\"browserify\">Browserify</h1>\n<p><a href=\"http://browserify.org/\">Browserify</a> is a tool that allows you to use the <a href=\"https://nodejs.org/api/modules.html\">require</a> <a href=\"/_glossary/NODEJS.md\">Node.js</a> function while working for the browser by bundling up all the required dependencies. </p>\n<p>The idea behind Browserify is to make it possible to use existing libraries from <a href=\"/_glossary/NPM.md\">npm</a> even when writing code for the client side. To allow this, it goes through the code, request the required dependencies, then create a single file containing everything: both the dependencies and the code using them.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BROWSERIFY.md"
  },
  {
    "name": "Brunch",
    "description": "a tool focusing on the production of deployment-ready files from development files",
    "markdown": "\n\n# Brunch\n\n[Brunch](http://brunch.io/) is a builder. Not a generic task runner, but a specialized tool focusing on the production of a small number of deployment-ready files from a large number of heterogenous development files or trees.\n\nBrunch is fundamentally specialized and geared towards building assets, these files that get used in the end by the runtime platform, usually a web browser. It thus comes pre-equipped with a number of behaviors and features such as concatenation, minification and watching of source files.\n",
    "html": "<h1 id=\"brunch\">Brunch</h1>\n<p><a href=\"http://brunch.io/\">Brunch</a> is a builder. Not a generic task runner, but a specialized tool focusing on the production of a small number of deployment-ready files from a large number of heterogenous development files or trees.</p>\n<p>Brunch is fundamentally specialized and geared towards building assets, these files that get used in the end by the runtime platform, usually a web browser. It thus comes pre-equipped with a number of behaviors and features such as concatenation, minification and watching of source files.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/BRUNCH.md"
  },
  {
    "name": "Canvas",
    "description": "an HTML element for graphic applications in 2D or 3D",
    "markdown": "\n\n# Canvas\n\nThe [Canvas HTML-Element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) allows access to individual pixels to enable fast drawing applications.\n\nIts API gives access to [WebGL](/_glossary/WEBGL.md) for 3D graphics and to the [2D drawing API](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D).\n",
    "html": "<h1 id=\"canvas\">Canvas</h1>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\">Canvas HTML-Element</a> allows access to individual pixels to enable fast drawing applications.</p>\n<p>Its API gives access to <a href=\"/_glossary/WEBGL.md\">WebGL</a> for 3D graphics and to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">2D drawing API</a>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CANVAS.md"
  },
  {
    "name": "Chai",
    "description": "an assertion library used with a JavaScript testing framework",
    "markdown": "\n\n# Chai\n\n[Chai](http://chaijs.com/) is a Behavior Driven Development (BDD) / Test Driven Development (TDD) assertion library for [Node.js](/_glossary/NODEJS.md) and the browser. It can be paired with any JavaScript testing framework, such as [Mocha](/_glossary/MOCHA.md).\n\nThe Chai assertion library allows you to write assertions in the classical form: `assert.typeOf(foo, 'string')`, but where Chai shines is its chain-capable style which makes writing assertions very readable: `expect(foo).to.be.a('string')`.\n",
    "html": "<h1 id=\"chai\">Chai</h1>\n<p><a href=\"http://chaijs.com/\">Chai</a> is a Behavior Driven Development (BDD) / Test Driven Development (TDD) assertion library for <a href=\"/_glossary/NODEJS.md\">Node.js</a> and the browser. It can be paired with any JavaScript testing framework, such as <a href=\"/_glossary/MOCHA.md\">Mocha</a>.</p>\n<p>The Chai assertion library allows you to write assertions in the classical form: <code>assert.typeOf(foo, &#39;string&#39;)</code>, but where Chai shines is its chain-capable style which makes writing assertions very readable: <code>expect(foo).to.be.a(&#39;string&#39;)</code>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CHAI.md"
  },
  {
    "name": "Chakra",
    "description": "a JavaScript engine developed by Microsoft for its Edge browser which could also be used with Node.js instead of V8.",
    "markdown": "\n\n# Chakra\n\nChakra is a JavaScript engine that powers Microsoft Edge and Windows applications written in HTML/CSS/JS.\n\nChakra is open-sourced as [ChakraCore](https://github.com/Microsoft/ChakraCore) and can [optionally be used with Node.js](https://github.com/nodejs/node-chakracore) instead of [V8](/_glossary/V8.md).\n",
    "html": "<h1 id=\"chakra\">Chakra</h1>\n<p>Chakra is a JavaScript engine that powers Microsoft Edge and Windows applications written in HTML/CSS/JS.</p>\n<p>Chakra is open-sourced as <a href=\"https://github.com/Microsoft/ChakraCore\">ChakraCore</a> and can <a href=\"https://github.com/nodejs/node-chakracore\">optionally be used with Node.js</a> instead of <a href=\"/_glossary/V8.md\">V8</a>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CHAKRA.md"
  },
  {
    "name": "Closure",
    "description": "a way of referencing variables from a child function while retaining their value even if it changes in the parent function",
    "markdown": "\n\n# Closure\n\nA closure is function that closes over its environment. It has access to the state of the environment, but the variables inside the closure are private.\n\nExample:\n\n```js\n(function (){\n  var scopeVar = 'Hello';\n\n  (function closure(){\n    var closureVar = ' World';\n    console.log(scopeVar + closureVar);    \n  })();\n})();\n```\n\n`scopeVar` is accessible inside the outer and the inner function, but `closureVar` is only accessible inside the inner function.\n",
    "html": "<h1 id=\"closure\">Closure</h1>\n<p>A closure is function that closes over its environment. It has access to the state of the environment, but the variables inside the closure are private.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">(function (){\n  var scopeVar = &#39;Hello&#39;;\n\n  (function closure(){\n    var closureVar = &#39; World&#39;;\n    console.log(scopeVar + closureVar);    \n  })();\n})();\n</code></pre>\n<p><code>scopeVar</code> is accessible inside the outer and the inner function, but <code>closureVar</code> is only accessible inside the inner function.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CLOSURE.md"
  },
  {
    "name": "Closure Compiler",
    "description": "a JavaScript checker and optimizer",
    "markdown": "\n\n# Closure Compiler\n\nThe [Closure Compiler](https://developers.google.com/closure/compiler/) is a tool for making JavaScript download and run faster. It is a true compiler for JavaScript. Instead of compiling from a source language to machine code, it compiles from JavaScript to better JavaScript. It parses your JavaScript, analyzes it, removes dead code and rewrites and minimizes what’s left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls.\n\n## Usage\n\n*Closure-compiler requires java to be installed and in the path.*\n\nThe compiler package now includes build tool plugins for [Grunt](/_glossary/GRUNT.md) and [Gulp](/_glossary/GULP.md).\n\n### Installation\n\n```sh\nnpm install --save google-closure-compiler\n```\n\n### Configuration\n\nThe compiler has a large number of flags. The best documentation for the flags can be found by running the `--help` command of the `compiler.jar` found inside the `node_modules/google-closure-compiler` folder:\n\n```sh\njava -jar compiler.jar --help\n```\n\n### Specifying Options\n\nBoth the grunt and gulp tasks take options objects. The option parameters map directly to the compiler flags without the leading `--` characters.\n\nValues are either strings or booleans. Options which have multiple values can be arrays.\n\n```js\n{\n  js: ['/file-one.js', '/file-two.js'],\n  compilation_level: 'ADVANCED',\n  js_output_file: 'out.js',\n  debug: true\n}\n```\n\nFor advanced usages, the options may be specified as an array of strings. These values include the `--` characters and are directly passed to the compiler in the order specified:\n\n```js\n[\n  '--js', '/file-one.js',\n  '--js', '/file-two.js',\n  '--compilation_level', 'ADVANCED',\n  '--js_output_file', 'out.js',\n  '--debug'\n]\n```\n\nWhen an array of flags is passed, the input files should not be specified via the build tools, but rather as compilation flags directly.\n\nSome shells (particularly windows) try to do expansion on globs rather than passing the string on to the compiler. To prevent this it is necessary to quote certain arguments:\n\n```js\n{\n  js: '\"my/quoted/glob/**.js\"',\n  compilation_level: 'ADVANCED',\n  js_output_file: 'out.js',\n  debug: true\n}\n```\n\n## Using the Grunt Task\n\nInclude the plugin in your `Gruntfile.js`:\n\n```js\nrequire('google-closure-compiler').grunt(grunt);\n// The load-grunt-tasks plugin won’t automatically load closure-compiler\n```\n \nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Basic Configuration Example:\n\n```js\nrequire('google-closure-compiler').grunt(grunt);\n \n// Project configuration. \ngrunt.initConfig({\n  'closure-compiler': {\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/js/**/*.js']\n      },\n      options: {\n        compilation_level: 'SIMPLE',\n        language_in: 'ECMASCRIPT5_STRICT',\n        create_source_map: 'dest/output.min.js.map',\n        output_wrapper: '(function(){\\n%output%\\n}).call(this)\\n//# sourceMappingURL=output.min.js.map'\n      }\n    }\n  }\n});\n```\n\n## Using the Gulp Plugin\n\nThe gulp plugin supports piping multiple files through the compiler.\n\nOptions are a direct match to the compiler flags without the leading `--`.\n\n### Basic Configuration Example:\n\n```js\nvar closureCompiler = require('google-closure-compiler').gulp();\n \ngulp.task('js-compile', function () {\n  return gulp.src('./src/js/**/*.js', { base: './' })\n    .pipe(closureCompiler({\n      compilation_level: 'SIMPLE',\n      warning_level: 'VERBOSE',\n      language_in: 'ECMASCRIPT6_STRICT',\n      language_out: 'ECMASCRIPT5_STRICT',\n      output_wrapper: '(function(){\\n%output%\\n}).call(this)',\n      js_output_file: 'output.min.js'\n    }))\n    .pipe(gulp.dest('./dist/js'));\n});\n```\n\n----------\n\n*Source:*\n\n- [Google Closure Compiler](https://github.com/google/closure-compiler)*. GitHub repo.*\n",
    "html": "<h1 id=\"closure-compiler\">Closure Compiler</h1>\n<p>The <a href=\"https://developers.google.com/closure/compiler/\">Closure Compiler</a> is a tool for making JavaScript download and run faster. It is a true compiler for JavaScript. Instead of compiling from a source language to machine code, it compiles from JavaScript to better JavaScript. It parses your JavaScript, analyzes it, removes dead code and rewrites and minimizes what’s left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><em>Closure-compiler requires java to be installed and in the path.</em></p>\n<p>The compiler package now includes build tool plugins for <a href=\"/_glossary/GRUNT.md\">Grunt</a> and <a href=\"/_glossary/GULP.md\">Gulp</a>.</p>\n<h3 id=\"installation\">Installation</h3>\n<pre><code class=\"lang-sh\">npm install --save google-closure-compiler\n</code></pre>\n<h3 id=\"configuration\">Configuration</h3>\n<p>The compiler has a large number of flags. The best documentation for the flags can be found by running the <code>--help</code> command of the <code>compiler.jar</code> found inside the <code>node_modules/google-closure-compiler</code> folder:</p>\n<pre><code class=\"lang-sh\">java -jar compiler.jar --help\n</code></pre>\n<h3 id=\"specifying-options\">Specifying Options</h3>\n<p>Both the grunt and gulp tasks take options objects. The option parameters map directly to the compiler flags without the leading <code>--</code> characters.</p>\n<p>Values are either strings or booleans. Options which have multiple values can be arrays.</p>\n<pre><code class=\"lang-js\">{\n  js: [&#39;/file-one.js&#39;, &#39;/file-two.js&#39;],\n  compilation_level: &#39;ADVANCED&#39;,\n  js_output_file: &#39;out.js&#39;,\n  debug: true\n}\n</code></pre>\n<p>For advanced usages, the options may be specified as an array of strings. These values include the <code>--</code> characters and are directly passed to the compiler in the order specified:</p>\n<pre><code class=\"lang-js\">[\n  &#39;--js&#39;, &#39;/file-one.js&#39;,\n  &#39;--js&#39;, &#39;/file-two.js&#39;,\n  &#39;--compilation_level&#39;, &#39;ADVANCED&#39;,\n  &#39;--js_output_file&#39;, &#39;out.js&#39;,\n  &#39;--debug&#39;\n]\n</code></pre>\n<p>When an array of flags is passed, the input files should not be specified via the build tools, but rather as compilation flags directly.</p>\n<p>Some shells (particularly windows) try to do expansion on globs rather than passing the string on to the compiler. To prevent this it is necessary to quote certain arguments:</p>\n<pre><code class=\"lang-js\">{\n  js: &#39;&quot;my/quoted/glob/**.js&quot;&#39;,\n  compilation_level: &#39;ADVANCED&#39;,\n  js_output_file: &#39;out.js&#39;,\n  debug: true\n}\n</code></pre>\n<h2 id=\"using-the-grunt-task\">Using the Grunt Task</h2>\n<p>Include the plugin in your <code>Gruntfile.js</code>:</p>\n<pre><code class=\"lang-js\">require(&#39;google-closure-compiler&#39;).grunt(grunt);\n// The load-grunt-tasks plugin won’t automatically load closure-compiler\n</code></pre>\n<p>Task targets, files and options may be specified according to the grunt <a href=\"http://gruntjs.com/configuring-tasks\">Configuring tasks</a> guide.</p>\n<h3 id=\"basic-configuration-example-\">Basic Configuration Example:</h3>\n<pre><code class=\"lang-js\">require(&#39;google-closure-compiler&#39;).grunt(grunt);\n\n// Project configuration. \ngrunt.initConfig({\n  &#39;closure-compiler&#39;: {\n    my_target: {\n      files: {\n        &#39;dest/output.min.js&#39;: [&#39;src/js/**/*.js&#39;]\n      },\n      options: {\n        compilation_level: &#39;SIMPLE&#39;,\n        language_in: &#39;ECMASCRIPT5_STRICT&#39;,\n        create_source_map: &#39;dest/output.min.js.map&#39;,\n        output_wrapper: &#39;(function(){\\n%output%\\n}).call(this)\\n//# sourceMappingURL=output.min.js.map&#39;\n      }\n    }\n  }\n});\n</code></pre>\n<h2 id=\"using-the-gulp-plugin\">Using the Gulp Plugin</h2>\n<p>The gulp plugin supports piping multiple files through the compiler.</p>\n<p>Options are a direct match to the compiler flags without the leading <code>--</code>.</p>\n<h3 id=\"basic-configuration-example-\">Basic Configuration Example:</h3>\n<pre><code class=\"lang-js\">var closureCompiler = require(&#39;google-closure-compiler&#39;).gulp();\n\ngulp.task(&#39;js-compile&#39;, function () {\n  return gulp.src(&#39;./src/js/**/*.js&#39;, { base: &#39;./&#39; })\n    .pipe(closureCompiler({\n      compilation_level: &#39;SIMPLE&#39;,\n      warning_level: &#39;VERBOSE&#39;,\n      language_in: &#39;ECMASCRIPT6_STRICT&#39;,\n      language_out: &#39;ECMASCRIPT5_STRICT&#39;,\n      output_wrapper: &#39;(function(){\\n%output%\\n}).call(this)&#39;,\n      js_output_file: &#39;output.min.js&#39;\n    }))\n    .pipe(gulp.dest(&#39;./dist/js&#39;));\n});\n</code></pre>\n<hr>\n<p><em>Source:</em></p>\n<ul>\n<li><a href=\"https://github.com/google/closure-compiler\">Google Closure Compiler</a><em>. GitHub repo.</em></li>\n</ul>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CLOSURE_COMPILER.md"
  },
  {
    "name": "Coffeescript",
    "description": "a language that compiles into JavaScript",
    "markdown": "\n\n# CoffeeScript\n\n[CoffeeScript](http://coffeescript.org/) is a little language that compiles into JavaScript. It is an attempt to expose the good parts of JavaScript in a simple way and friendly syntax, the golden rule being: “It’s just JavaScript”.\n\nThe code compiles one-to-one into the equivalent JavaScript, and there is no interpretation at runtime. The compiled output is readable and pretty-printed, will work in every JavaScript runtime, and tends to run as fast or faster than the equivalent handwritten JavaScript.\n",
    "html": "<h1 id=\"coffeescript\">CoffeeScript</h1>\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> is a little language that compiles into JavaScript. It is an attempt to expose the good parts of JavaScript in a simple way and friendly syntax, the golden rule being: “It’s just JavaScript”.</p>\n<p>The code compiles one-to-one into the equivalent JavaScript, and there is no interpretation at runtime. The compiled output is readable and pretty-printed, will work in every JavaScript runtime, and tends to run as fast or faster than the equivalent handwritten JavaScript.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/COFFEESCRIPT.md"
  },
  {
    "name": "CommonJS",
    "description": "a project with the goal of specifying an ecosystem for JavaScript outside the browser (for example, on the server or for native desktop applications)",
    "markdown": "\n\n# CommonJS\n\n**CommonJS** is a project with the goal of specifying an ecosystem for JavaScript outside the browser (for example, on the server or for native desktop applications).\n\nServer side JavaScript has been around for a long time, and potentially offers some unique and interesting advantages over other languages because the same language is spoken by both client and server.\n\nUnfortunately, though, server side JavaScript is very fragmented. A script that accesses files can’t be used without modification on both rhino and [V8](/_glossary/V8.md). Spidermonkey and JavaScriptCore can’t both load in additional modules in the same way. A JavaScript web framework is very much tied to its interpreter and is often forced to create a bunch of APIs that Python, Ruby and Java programmers take for granted.\n\nThe goal for this project is to create a standard library that will ultimately allow web developers to choose among any number of web frameworks and tools and run that code on the platform that makes the most sense for their application.\n\n## History\n\nThe project was started by Mozilla engineer Kevin Dangoor in January 2009 and initially named **ServerJS**.\n\n> What I’m describing here is not a technical problem. It’s a matter of people getting together and making a decision to step forward and start building up something bigger and cooler together.\n> — Kevin Dangoor\n\nIn August 2009, the project was renamed **CommonJS** to show the broader applicability of the APIs. Specifications are created and approved in an open process. A specification is only considered final after it has been finished by multiple implementations. **CommonJS** is not affiliated with the [ECMA](/_glossary/ECMASCRIPT.md) International group TC39 working on ECMAScript, but some members of TC39 participate in the project.\n\nIn May 2013, Isaac Z. Schlueter, the author of [npm](/_glossary/NPM.md), the package manager for [Node.js](/_glossary/NODEJS.md), said **CommonJS** is being made obsolete by Node.js, and is avoided by the core Node.js developers.\n\n## Example usage\n\nAs an example, `foo.js` loads the module `circle.js` in the same directory.\n\nThe contents of `foo.js`:\n\n```js\nconst circle = require('./circle.js');\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n```\n\nThe contents of `circle.js`:\n\n```js\nconst PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};\n```\n\nThe module `circle.js` has exported the functions `area(..)` and `circumference(..)`. To add functions and objects to the root of your module, you can add them to the special `exports` object.\n\nVariables local to the module will be private, as though the module was wrapped in a function. In this example the variable `PI` is private to `circle.js`.\n\nIf you want the root of your module’s export to be a function (such as a constructor) or if you want to export a complete object in one assignment instead of building it one property at a time, assign it to `module.exports` instead of `exports`.\n\nBelow, `bar.js` makes use of the square module, which exports a constructor:\n\n```js\nconst square = require('./square.js');\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n```\n\nThe `square` module is defined in `square.js`:\n\n```js\n// Assigning to exports will not modify module, must use module.exports\nmodule.exports = function (width) {\n  return {\n    area: function () {\n      return (width * width);\n    }\n  };\n}\n```\n\nThe module system is implemented in the `require('module')` module.\n\n*This section was taken from [Node.js documentation site](https://nodejs.org/docs/latest/api/modules.html).*\n",
    "html": "<h1 id=\"commonjs\">CommonJS</h1>\n<p><strong>CommonJS</strong> is a project with the goal of specifying an ecosystem for JavaScript outside the browser (for example, on the server or for native desktop applications).</p>\n<p>Server side JavaScript has been around for a long time, and potentially offers some unique and interesting advantages over other languages because the same language is spoken by both client and server.</p>\n<p>Unfortunately, though, server side JavaScript is very fragmented. A script that accesses files can’t be used without modification on both rhino and <a href=\"/_glossary/V8.md\">V8</a>. Spidermonkey and JavaScriptCore can’t both load in additional modules in the same way. A JavaScript web framework is very much tied to its interpreter and is often forced to create a bunch of APIs that Python, Ruby and Java programmers take for granted.</p>\n<p>The goal for this project is to create a standard library that will ultimately allow web developers to choose among any number of web frameworks and tools and run that code on the platform that makes the most sense for their application.</p>\n<h2 id=\"history\">History</h2>\n<p>The project was started by Mozilla engineer Kevin Dangoor in January 2009 and initially named <strong>ServerJS</strong>.</p>\n<blockquote>\n<p>What I’m describing here is not a technical problem. It’s a matter of people getting together and making a decision to step forward and start building up something bigger and cooler together.\n— Kevin Dangoor</p>\n</blockquote>\n<p>In August 2009, the project was renamed <strong>CommonJS</strong> to show the broader applicability of the APIs. Specifications are created and approved in an open process. A specification is only considered final after it has been finished by multiple implementations. <strong>CommonJS</strong> is not affiliated with the <a href=\"/_glossary/ECMASCRIPT.md\">ECMA</a> International group TC39 working on ECMAScript, but some members of TC39 participate in the project.</p>\n<p>In May 2013, Isaac Z. Schlueter, the author of <a href=\"/_glossary/NPM.md\">npm</a>, the package manager for <a href=\"/_glossary/NODEJS.md\">Node.js</a>, said <strong>CommonJS</strong> is being made obsolete by Node.js, and is avoided by the core Node.js developers.</p>\n<h2 id=\"example-usage\">Example usage</h2>\n<p>As an example, <code>foo.js</code> loads the module <code>circle.js</code> in the same directory.</p>\n<p>The contents of <code>foo.js</code>:</p>\n<pre><code class=\"lang-js\">const circle = require(&#39;./circle.js&#39;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\n<p>The contents of <code>circle.js</code>:</p>\n<pre><code class=\"lang-js\">const PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};\n</code></pre>\n<p>The module <code>circle.js</code> has exported the functions <code>area(..)</code> and <code>circumference(..)</code>. To add functions and objects to the root of your module, you can add them to the special <code>exports</code> object.</p>\n<p>Variables local to the module will be private, as though the module was wrapped in a function. In this example the variable <code>PI</code> is private to <code>circle.js</code>.</p>\n<p>If you want the root of your module’s export to be a function (such as a constructor) or if you want to export a complete object in one assignment instead of building it one property at a time, assign it to <code>module.exports</code> instead of <code>exports</code>.</p>\n<p>Below, <code>bar.js</code> makes use of the square module, which exports a constructor:</p>\n<pre><code class=\"lang-js\">const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`The area of my square is ${mySquare.area()}`);\n</code></pre>\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\n<pre><code class=\"lang-js\">// Assigning to exports will not modify module, must use module.exports\nmodule.exports = function (width) {\n  return {\n    area: function () {\n      return (width * width);\n    }\n  };\n}\n</code></pre>\n<p>The module system is implemented in the <code>require(&#39;module&#39;)</code> module.</p>\n<p><em>This section was taken from <a href=\"https://nodejs.org/docs/latest/api/modules.html\">Node.js documentation site</a>.</em></p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/COMMONJS.md"
  },
  {
    "name": "CORS",
    "description": "a way for a server to make things accessible to pages hosted on other domains",
    "markdown": "\n\n# CORS\n\n[CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS) stands for Cross Origin Resource sharing. It’s a way for a server to allow pages hosted on other domains (technically other origins) to make http requests to it.\n\nA web page can usually embed images, scripts, video, audio, etc. from any location it wants. However, web fonts and [AJAX](/_glossary/AJAX.md) requests can usually only make requests to the same origin the web page is served from, because of the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). CORS allows a server to mark [resources](https://en.wikipedia.org/wiki/Web_resource) as shared with other origins, by sending an `Access-Control-Allow-Origin` [header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers) in response to an [OPTIONS](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.2) request from the browser.\n\nFor information on how to set this up on your server, refer to [this document](http://enable-cors.org/server.html).\n",
    "html": "<h1 id=\"cors\">CORS</h1>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">CORS</a> stands for Cross Origin Resource sharing. It’s a way for a server to allow pages hosted on other domains (technically other origins) to make http requests to it.</p>\n<p>A web page can usually embed images, scripts, video, audio, etc. from any location it wants. However, web fonts and <a href=\"/_glossary/AJAX.md\">AJAX</a> requests can usually only make requests to the same origin the web page is served from, because of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a>. CORS allows a server to mark <a href=\"https://en.wikipedia.org/wiki/Web_resource\">resources</a> as shared with other origins, by sending an <code>Access-Control-Allow-Origin</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\">header</a> in response to an <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.2\">OPTIONS</a> request from the browser.</p>\n<p>For information on how to set this up on your server, refer to <a href=\"http://enable-cors.org/server.html\">this document</a>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CORS.md"
  },
  {
    "name": "CouchDB",
    "description": "a NoSQL database with JavaScript as query language and HTTP as API",
    "markdown": "\n\n# CouchDB\n\n[Apache CouchDB](http://couchdb.apache.org/), commonly referred to as CouchDB, is an open source database that focuses on ease of use and on being “a database that completely embraces the web”.\n\nIt is a document-oriented NoSQL database that uses [JSON](/_glossary/JSON.md) to store data, JavaScript as its query language using MapReduce, and HTTP for an API.\n\nCouchDB was first released in 2005 and later became an Apache project in 2008.\n",
    "html": "<h1 id=\"couchdb\">CouchDB</h1>\n<p><a href=\"http://couchdb.apache.org/\">Apache CouchDB</a>, commonly referred to as CouchDB, is an open source database that focuses on ease of use and on being “a database that completely embraces the web”.</p>\n<p>It is a document-oriented NoSQL database that uses <a href=\"/_glossary/JSON.md\">JSON</a> to store data, JavaScript as its query language using MapReduce, and HTTP for an API.</p>\n<p>CouchDB was first released in 2005 and later became an Apache project in 2008.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/COUCHDB.md"
  },
  {
    "name": "Currying",
    "description": "the process to transform a function with multiple parameters into a chain of functions of one parameter",
    "markdown": "\n\n# Currying\n\nCurrying is the technique of translating the evaluation of a function that takes N arguments into evaluating a sequence of N functions, each with a single argument.\n\nThis process is done by calling the function with one parameter, and return a new function with the parameter already bound inside a [closure](/_glossary/CLOSURE.md).\n\nFor example, let’s say we have an `add` function that takes two parameters `a` and `b`:\n\n```js\n// The native function definition would be to have a and b as parameters:\nadd(3, 5)\n\n// After currying the function, we can then apply it like so:\ncurryAdd(3)(5)\n```\n\nThis is an interesting technique allowing to *partially call* a function, leaving the rest of the call for later.\n\nFor instance, with our previous `curryAdd` function:\n\n```js\nvar add3 = curryAdd(3);\nvar add10 = curryAdd(10);\n\n// Then we can call\nadd3(5) // => 8\nadd10(5) // => 15\n```\n\n[Lodash](/_glossary/LODASH.md), [Wu](https://fitzgen.github.io/wu.js/#curryable) and [Ramda](/_glossary/RAMDA.md) are 3 of the many libraries that provide currying.\n\n## Currying with Javascript Libraries\n\nMost Javascript libraries don't stick to this pure definition of currying, and instead mix in a bit of partial application. What this means is that they allow you to call the curried functions with more than one argument at a time. As you give it arguments, it will continue returning new curried functions until you've given it all the arguments it expects, at which point it will apply them to the function. It's really auto-curried partial application.\n\nThus, the following are equivalent:\n\n```js\nfoo(1)(2)(3)(4)(5);\nfoo(1, 2, 3, 4, 5);\nfoo(1)(2, 3, 4, 5);\nfoo(1, 2)(3)(4, 5);\n```\n\nIt's \"syntactic sugar\" that most libraries use, and for them the end result is the same as when you call `foo(1)(2)(3)(4)(5)`.\n",
    "html": "<h1 id=\"currying\">Currying</h1>\n<p>Currying is the technique of translating the evaluation of a function that takes N arguments into evaluating a sequence of N functions, each with a single argument.</p>\n<p>This process is done by calling the function with one parameter, and return a new function with the parameter already bound inside a <a href=\"/_glossary/CLOSURE.md\">closure</a>.</p>\n<p>For example, let’s say we have an <code>add</code> function that takes two parameters <code>a</code> and <code>b</code>:</p>\n<pre><code class=\"lang-js\">// The native function definition would be to have a and b as parameters:\nadd(3, 5)\n\n// After currying the function, we can then apply it like so:\ncurryAdd(3)(5)\n</code></pre>\n<p>This is an interesting technique allowing to <em>partially call</em> a function, leaving the rest of the call for later.</p>\n<p>For instance, with our previous <code>curryAdd</code> function:</p>\n<pre><code class=\"lang-js\">var add3 = curryAdd(3);\nvar add10 = curryAdd(10);\n\n// Then we can call\nadd3(5) // =&gt; 8\nadd10(5) // =&gt; 15\n</code></pre>\n<p><a href=\"/_glossary/LODASH.md\">Lodash</a>, <a href=\"https://fitzgen.github.io/wu.js/#curryable\">Wu</a> and <a href=\"/_glossary/RAMDA.md\">Ramda</a> are 3 of the many libraries that provide currying.</p>\n<h2 id=\"currying-with-javascript-libraries\">Currying with Javascript Libraries</h2>\n<p>Most Javascript libraries don&#39;t stick to this pure definition of currying, and instead mix in a bit of partial application. What this means is that they allow you to call the curried functions with more than one argument at a time. As you give it arguments, it will continue returning new curried functions until you&#39;ve given it all the arguments it expects, at which point it will apply them to the function. It&#39;s really auto-curried partial application.</p>\n<p>Thus, the following are equivalent:</p>\n<pre><code class=\"lang-js\">foo(1)(2)(3)(4)(5);\nfoo(1, 2, 3, 4, 5);\nfoo(1)(2, 3, 4, 5);\nfoo(1, 2)(3)(4, 5);\n</code></pre>\n<p>It&#39;s &quot;syntactic sugar&quot; that most libraries use, and for them the end result is the same as when you call <code>foo(1)(2)(3)(4)(5)</code>.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/CURRYING.md"
  },
  {
    "name": "D3.js",
    "description": "a library for manipulating documents based on data",
    "markdown": "\n\n# D3.js\n\n[D3.js](http://d3js.org/) is a library for manipulating documents based on data. D3 helps bringing data to life using HTML, SVG, and CSS. Its emphasis on web standards gives the full capabilities of modern browsers without tying to a proprietary framework, combining powerful visualization components and a data-driven approach to [DOM](/_glossary/DOM.md) manipulation.\n",
    "html": "<h1 id=\"d3-js\">D3.js</h1>\n<p><a href=\"http://d3js.org/\">D3.js</a> is a library for manipulating documents based on data. D3 helps bringing data to life using HTML, SVG, and CSS. Its emphasis on web standards gives the full capabilities of modern browsers without tying to a proprietary framework, combining powerful visualization components and a data-driven approach to <a href=\"/_glossary/DOM.md\">DOM</a> manipulation.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/D3JS.md"
  },
  {
    "name": "Design Patterns",
    "description": "a general reusable solution to a commonly occurring problem within a given context in software design",
    "markdown": "\n\n# Design Patterns\n\nIn software engineering, a [design pattern](https://en.wikipedia.org/wiki/Software_design_pattern) is a general reusable solution to a commonly occurring problem within a given context in software design. A design pattern is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system. Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved. Patterns that imply mutable state may be unsuited for functional programming languages, some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages.\n\nDesign patterns may be viewed as a structured approach to computer programming intermediate between the levels of a programming paradigm and a concrete algorithm.\n\n## Types\n\nDesign patterns reside in the domain of modules and interconnections. At a higher level there are architectural patterns which are larger in scope, usually describing an overall pattern followed by an entire system.\n\nThere are many types of design patterns, for instance:\n\n- **Algorithm strategy patterns** addressing concerns related to high-level strategies describing how to exploit application characteristics on a computing platform.\n- **Computational design patterns** addressing concerns related to key computation identification.\n- **Execution patterns** which address issues related to lower-level support of application execution, including strategies for executing streams of tasks and for the definition of building blocks to support task synchronization.\n- **Implementation strategy patterns** addressing concerns related to implementing source code to support\n 1. program organization, and\n 2. the common data structures specific to parallel programming.\n- **Structural design patterns** addressing concerns related to global structures of applications being developed.\n\n## History\n\nPatterns originated as an architectural concept by [Christopher Alexander](https://en.wikipedia.org/wiki/Christopher_Alexander) (1977/79). In 1987, [Kent Beck](https://en.wikipedia.org/wiki/Kent_Beck) and [Ward Cunningham](https://en.wikipedia.org/wiki/Ward_Cunningham) began experimenting with the idea of applying patterns to programming – specifically pattern languages – and presented their results at the [OOPSLA](https://en.wikipedia.org/wiki/OOPSLA) conference that year. In the following years, Beck, Cunningham and others followed up on this work.\n\nDesign patterns gained popularity in computer science after the book [Design Patterns: Elements of Reusable Object-Oriented Software](https://en.wikipedia.org/wiki/Design_Patterns_(book)) was published in 1994 by the so-called “Gang of Four” (Gamma et al.), which is frequently abbreviated as “GoF”. That same year, the first Pattern Languages of Programming Conference was held and the following year, the Portland Pattern Repository was set up for documentation of design patterns. The scope of the term remains a matter of dispute. Notable books in the design pattern genre include:\n\n- [Gamma, Erich](https://en.wikipedia.org/wiki/Erich_Gamma); [Helm, Richard](https://en.wikipedia.org/wiki/Richard_Helm); [Johnson, Ralph](https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist)); [Vlissides, John](https://en.wikipedia.org/wiki/John_Vlissides) (1995). [Design Patterns: Elements of Reusable Object-Oriented Software](https://en.wikipedia.org/wiki/Design_Patterns_(book)). Addison-Wesley. ISBN 0-201-63361-2.\n- [Brinch Hansen, Per](https://en.wikipedia.org/wiki/Per_Brinch_Hansen) (1995). *Studies in Computational Science: Parallel Programming Paradigms.* Prentice Hall. ISBN 0-13-439324-4.\n- Buschmann, Frank; Meunier, Regine; Rohnert, Hans; Sommerlad, Peter (1996). *Pattern-Oriented Software Architecture, Volume 1: A System of Patterns.* John Wiley & Sons. ISBN 0-471-95869-7.\n- [Schmidt, Douglas C.](https://en.wikipedia.org/wiki/Douglas_C._Schmidt); Stal, Michael; Rohnert, Hans; Buschmann, Frank (2000). *Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects.* John Wiley & Sons. ISBN 0-471-60695-2.\n- [Fowler, Martin](https://en.wikipedia.org/wiki/Martin_Fowler) (2002). *Patterns of Enterprise Application Architecture.* Addison-Wesley. ISBN 978-0-321-12742-6.\n- Hohpe, Gregor; Woolf, Bobby (2003). [Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions.](https://en.wikipedia.org/wiki/Enterprise_Integration_Patterns) Addison-Wesley. ISBN 0-321-20068-3.\n- Freeman, Eric T; Robson, Elisabeth; Bates, Bert; [Sierra, Kathy](https://en.wikipedia.org/wiki/Kathy_Sierra) (2004). *Head First Design Patterns.* O’Reilly Media. ISBN 0-596-00712-4.\n\nAlthough design patterns have been applied practically for a long time, formalization of the concept of design patterns languished for several years.\n\n## Practice\n\nDesign patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns.\n\nIn order to achieve flexibility, design patterns usually introduce additional levels of indirection, which in some cases may complicate the resulting designs and hurt application performance.\n\nBy definition, a pattern must be programmed anew into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components, researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted.\n\nSoftware design techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem.\n\n## Classification and list\n\nDesign patterns were originally grouped into the categories: *creational patterns*, *structural patterns*, and *behavioral patterns*, and described using the concepts of delegation, aggregation, and consultation. For further background on object-oriented design, see coupling and cohesion, inheritance, interface, and polymorphism. Another classification has also introduced the notion of architectural design pattern that may be applied at the architecture level of the software such as the Model–View–Controller pattern.\n\n### Creational patterns\n\n| Name | Description |\n| --- | --- |\n| [Abstract factory](https://en.wikipedia.org/wiki/Abstract_factory_pattern) | Provide an interface for creating families of related or dependent objects without specifying their concrete classes. |\n| [Builder](https://en.wikipedia.org/wiki/Builder_pattern) | Separate the construction of a complex object from its representation, allowing the same construction process to create various representations. |\n| [Factory method](/_glossary/FACTORY_PATTERN.md) | Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (dependency injection). |\n| [Lazy initialization](https://en.wikipedia.org/wiki/Lazy_initialization) | Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as “virtual proxy”, an implementation strategy for the Proxy pattern. |\n| [Multiton](https://en.wikipedia.org/wiki/Multiton_pattern) | Ensure a class has only named instances, and provide a global point of access to them. |\n| [Object pool](https://en.wikipedia.org/wiki/Object_pool_pattern) | Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns. |\n| [Prototype](/_glossary/PROTOTYPE_PATTERN.md) | Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype. |\n| [Resource acquisition is initialization](https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization) | Ensure that resources are properly released by tying them to the lifespan of suitable objects. |\n| [Singleton](/_glossary/SINGLETON_PATTERN.md) | Ensure a class has only one instance, and provide a global point of access to it. |\n\n### Structural patterns\n\n| Name | Description |\n| --- | --- |\n| [Adapter](https://en.wikipedia.org/wiki/Adapter_pattern) or Wrapper or Translator | Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator. |\n| [Bridge](https://en.wikipedia.org/wiki/Bridge_pattern) | Decouple an abstraction from its implementation allowing the two to vary independently. |\n| [Composite](https://en.wikipedia.org/wiki/Composite_pattern) | \tCompose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. |\n| [Decorator](https://en.wikipedia.org/wiki/Decorator_pattern) | \tAttach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality. |\n| [Facade](/_glossary/FACADE_PATTERN.md) | Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. |\n| [Flyweight](https://en.wikipedia.org/wiki/Flyweight_pattern) | Use sharing to support large numbers of similar objects efficiently. |\n| [Front controller](https://en.wikipedia.org/wiki/Front_controller) | The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests. |\n| [Marker](https://en.wikipedia.org/wiki/Marker_interface_pattern) | Empty interface to associate metadata with a class. |\n| [Module](/_glossary/MODULE_PATTERN.md) | \tGroup several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity. |\n| [Proxy](https://en.wikipedia.org/wiki/Proxy_pattern) | Provide a surrogate or placeholder for another object to control access to it. |\n| [Twin](https://en.wikipedia.org/wiki/Twin_pattern) | Twin allows modeling of multiple inheritance in programming languages that do not support this feature. |\n\n### Behavioural patterns\n\n| Name | Description |\n| --- | --- |\n| [Blackboard](https://en.wikipedia.org/wiki/Blackboard_design_pattern) | Artificial intelligence pattern for combining disparate sources of data (see blackboard system) |\n| [Chain of responsibility](https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern) | Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it. |\n| [Command](https://en.wikipedia.org/wiki/Command_pattern) | Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations. |\n| [Interpreter](https://en.wikipedia.org/wiki/Interpreter_pattern) | Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language. |\n| [Iterator](https://en.wikipedia.org/wiki/Iterator_pattern) | Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation. |\n| [Mediator](/_glossary/MEDIATOR_PATTERN.md) | Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently. |\n| [Memento](https://en.wikipedia.org/wiki/Memento_pattern) | Without violating encapsulation, capture and externalize an object’s internal state allowing the object to be restored to this state later. |\n| [Null object](https://en.wikipedia.org/wiki/Null_Object_pattern) | Avoid null references by providing a default object. |\n| [Observer](/_glossary/OBSERVER_PATTERN.md) or [Publish/subscribe](https://en.wikipedia.org/wiki/Publish/subscribe) | Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically. |\n| [Servant](https://en.wikipedia.org/wiki/Design_pattern_Servant) | Define common functionality for a group of classes. |\n| [Specification](https://en.wikipedia.org/wiki/Specification_pattern) | Recombinable business logic in a Boolean fashion. |\n| [State](https://en.wikipedia.org/wiki/State_pattern) | Allow an object to alter its behavior when its internal state changes. The object will appear to change its class. |\n| [Strategy](https://en.wikipedia.org/wiki/Strategy_pattern) | Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. |\n| [Template method](https://en.wikipedia.org/wiki/Template_method_pattern) | Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure. |\n| [Visitor](https://en.wikipedia.org/wiki/Visitor_pattern) | Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates. |\n\n### Concurrency patterns\n\n| Name | Description |\n| --- | --- |\n| [Active Object](https://en.wikipedia.org/wiki/Active_object) | Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests. |\n| [Balking](https://en.wikipedia.org/wiki/Balking_pattern) | Only execute an action on an object when the object is in a particular state. |\n| [Binding properties](https://en.wikipedia.org/wiki/Binding_properties_pattern) | Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way. |\n| [Block chain](https://en.wikipedia.org/wiki/Block_chain_(database)) | Decentralized way to store data and agree on ways of processing it in a Merkle tree, optionally using Digital signature for any individual contributions. |\n| [Double-checked locking](https://en.wikipedia.org/wiki/Double_checked_locking_pattern) | Reduce the overhead of acquiring a lock by first testing the locking criterion (the “lock hint”) in an unsafe manner; only if that succeeds does the actual locking logic proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern. |\n| [Event-based asynchronous](https://en.wikipedia.org/wiki/Event-Based_Asynchronous_Pattern) | Addresses problems with the asynchronous pattern that occur in multithreaded programs. |\n| [Guarded suspension](https://en.wikipedia.org/wiki/Guarded_suspension) | \tManages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed. |\n| [Join](https://en.wikipedia.org/wiki/Join-pattern) | Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model. |\n| [Lock](https://en.wikipedia.org/wiki/Lock_(computer_science)) | One thread puts a “lock” on a resource, preventing other threads from accessing or modifying it. |\n| [Messaging design pattern (MDP)](https://en.wikipedia.org/wiki/Messaging_pattern) | Allows the interchange of information (i.e. messages) between components and applications. |\n| [Monitor object](https://en.wikipedia.org/wiki/Monitor_(synchronization)) | \tAn object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time. |\n| [Reactor](https://en.wikipedia.org/wiki/Reactor_pattern) | A reactor object provides an asynchronous interface to resources that must be handled synchronously. |\n| [Read-write lock](https://en.wikipedia.org/wiki/Read/write_lock_pattern) | Allows concurrent read access to an object, but requires exclusive access for write operations. |\n| [Scheduler](https://en.wikipedia.org/wiki/Scheduler_pattern) | Explicitly control when threads may execute single-threaded code. |\n| [Thread pool](https://en.wikipedia.org/wiki/Thread_pool_pattern) | \tA number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern. |\n| [Thread-specific storage](https://en.wikipedia.org/wiki/Thread-Specific_Storage) | Static or “global” memory local to a thread. |\n\n## Documentation\n\nThe documentation for a design pattern describes the context in which the pattern is used, the forces within the context that the pattern seeks to resolve, and the suggested solution. There is no single, standard format for documenting design patterns. Rather, a variety of different formats have been used by different pattern authors. However, according to Martin Fowler, certain pattern forms have become more well-known than others, and consequently become common starting points for new pattern-writing efforts. One example of a commonly used documentation format is the one used by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides (collectively known as the “Gang of Four”, or GoF for short) in their book Design Patterns. It contains the following sections:\n\n- **Pattern Name and Classification**: A descriptive and unique name that helps in identifying and referring to the pattern.\n- **Intent**: A description of the goal behind the pattern and the reason for using it.\n- **Also Known As**: Other names for the pattern.\n- **Motivation (Forces)**: A scenario consisting of a problem and a context in which this pattern can be used.\n- **Applicability**: Situations in which this pattern is usable; the context for the pattern.\n- **Structure**: A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose.\n- **Participants**: A listing of the classes and objects used in the pattern and their roles in the design.\n- **Collaboration**: A description of how classes and objects used in the pattern interact with each other.\n- **Consequences**: A description of the results, side effects, and trade offs caused by using the pattern.\n- **Implementation**: A description of an implementation of the pattern; the solution part of the pattern.\n- **Sample Code**: An illustration of how the pattern can be used in a programming language.\n- **Known Uses**: Examples of real usages of the pattern.\n- **Related Patterns**: Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns.\n\n----------\n\n*Source:*\n- [Software design pattern](https://en.wikipedia.org/wiki/Software_design_pattern)*. From Wikipedia, the free encyclopedia.*\n",
    "html": "<h1 id=\"design-patterns\">Design Patterns</h1>\n<p>In software engineering, a <a href=\"https://en.wikipedia.org/wiki/Software_design_pattern\">design pattern</a> is a general reusable solution to a commonly occurring problem within a given context in software design. A design pattern is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system. Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved. Patterns that imply mutable state may be unsuited for functional programming languages, some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages.</p>\n<p>Design patterns may be viewed as a structured approach to computer programming intermediate between the levels of a programming paradigm and a concrete algorithm.</p>\n<h2 id=\"types\">Types</h2>\n<p>Design patterns reside in the domain of modules and interconnections. At a higher level there are architectural patterns which are larger in scope, usually describing an overall pattern followed by an entire system.</p>\n<p>There are many types of design patterns, for instance:</p>\n<ul>\n<li><strong>Algorithm strategy patterns</strong> addressing concerns related to high-level strategies describing how to exploit application characteristics on a computing platform.</li>\n<li><strong>Computational design patterns</strong> addressing concerns related to key computation identification.</li>\n<li><strong>Execution patterns</strong> which address issues related to lower-level support of application execution, including strategies for executing streams of tasks and for the definition of building blocks to support task synchronization.</li>\n<li><strong>Implementation strategy patterns</strong> addressing concerns related to implementing source code to support<ol>\n<li>program organization, and</li>\n<li>the common data structures specific to parallel programming.</li>\n</ol>\n</li>\n<li><strong>Structural design patterns</strong> addressing concerns related to global structures of applications being developed.</li>\n</ul>\n<h2 id=\"history\">History</h2>\n<p>Patterns originated as an architectural concept by <a href=\"https://en.wikipedia.org/wiki/Christopher_Alexander\">Christopher Alexander</a> (1977/79). In 1987, <a href=\"https://en.wikipedia.org/wiki/Kent_Beck\">Kent Beck</a> and <a href=\"https://en.wikipedia.org/wiki/Ward_Cunningham\">Ward Cunningham</a> began experimenting with the idea of applying patterns to programming – specifically pattern languages – and presented their results at the <a href=\"https://en.wikipedia.org/wiki/OOPSLA\">OOPSLA</a> conference that year. In the following years, Beck, Cunningham and others followed up on this work.</p>\n<p>Design patterns gained popularity in computer science after the book <a href=\"https://en.wikipedia.org/wiki/Design_Patterns_(book\">Design Patterns: Elements of Reusable Object-Oriented Software</a>) was published in 1994 by the so-called “Gang of Four” (Gamma et al.), which is frequently abbreviated as “GoF”. That same year, the first Pattern Languages of Programming Conference was held and the following year, the Portland Pattern Repository was set up for documentation of design patterns. The scope of the term remains a matter of dispute. Notable books in the design pattern genre include:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Erich_Gamma\">Gamma, Erich</a>; <a href=\"https://en.wikipedia.org/wiki/Richard_Helm\">Helm, Richard</a>; <a href=\"https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist\">Johnson, Ralph</a>); <a href=\"https://en.wikipedia.org/wiki/John_Vlissides\">Vlissides, John</a> (1995). <a href=\"https://en.wikipedia.org/wiki/Design_Patterns_(book\">Design Patterns: Elements of Reusable Object-Oriented Software</a>). Addison-Wesley. ISBN 0-201-63361-2.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Per_Brinch_Hansen\">Brinch Hansen, Per</a> (1995). <em>Studies in Computational Science: Parallel Programming Paradigms.</em> Prentice Hall. ISBN 0-13-439324-4.</li>\n<li>Buschmann, Frank; Meunier, Regine; Rohnert, Hans; Sommerlad, Peter (1996). <em>Pattern-Oriented Software Architecture, Volume 1: A System of Patterns.</em> John Wiley &amp; Sons. ISBN 0-471-95869-7.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Douglas_C._Schmidt\">Schmidt, Douglas C.</a>; Stal, Michael; Rohnert, Hans; Buschmann, Frank (2000). <em>Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects.</em> John Wiley &amp; Sons. ISBN 0-471-60695-2.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Martin_Fowler\">Fowler, Martin</a> (2002). <em>Patterns of Enterprise Application Architecture.</em> Addison-Wesley. ISBN 978-0-321-12742-6.</li>\n<li>Hohpe, Gregor; Woolf, Bobby (2003). <a href=\"https://en.wikipedia.org/wiki/Enterprise_Integration_Patterns\">Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions.</a> Addison-Wesley. ISBN 0-321-20068-3.</li>\n<li>Freeman, Eric T; Robson, Elisabeth; Bates, Bert; <a href=\"https://en.wikipedia.org/wiki/Kathy_Sierra\">Sierra, Kathy</a> (2004). <em>Head First Design Patterns.</em> O’Reilly Media. ISBN 0-596-00712-4.</li>\n</ul>\n<p>Although design patterns have been applied practically for a long time, formalization of the concept of design patterns languished for several years.</p>\n<h2 id=\"practice\">Practice</h2>\n<p>Design patterns can speed up the development process by providing tested, proven development paradigms. Effective software design requires considering issues that may not become visible until later in the implementation. Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns.</p>\n<p>In order to achieve flexibility, design patterns usually introduce additional levels of indirection, which in some cases may complicate the resulting designs and hurt application performance.</p>\n<p>By definition, a pattern must be programmed anew into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components, researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted.</p>\n<p>Software design techniques are difficult to apply to a broader range of problems. Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem.</p>\n<h2 id=\"classification-and-list\">Classification and list</h2>\n<p>Design patterns were originally grouped into the categories: <em>creational patterns</em>, <em>structural patterns</em>, and <em>behavioral patterns</em>, and described using the concepts of delegation, aggregation, and consultation. For further background on object-oriented design, see coupling and cohesion, inheritance, interface, and polymorphism. Another classification has also introduced the notion of architectural design pattern that may be applied at the architecture level of the software such as the Model–View–Controller pattern.</p>\n<h3 id=\"creational-patterns\">Creational patterns</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Abstract_factory_pattern\">Abstract factory</a></td>\n<td>Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Builder_pattern\">Builder</a></td>\n<td>Separate the construction of a complex object from its representation, allowing the same construction process to create various representations.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/FACTORY_PATTERN.md\">Factory method</a></td>\n<td>Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (dependency injection).</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Lazy_initialization\">Lazy initialization</a></td>\n<td>Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as “virtual proxy”, an implementation strategy for the Proxy pattern.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Multiton_pattern\">Multiton</a></td>\n<td>Ensure a class has only named instances, and provide a global point of access to them.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Object_pool_pattern\">Object pool</a></td>\n<td>Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/PROTOTYPE_PATTERN.md\">Prototype</a></td>\n<td>Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\">Resource acquisition is initialization</a></td>\n<td>Ensure that resources are properly released by tying them to the lifespan of suitable objects.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/SINGLETON_PATTERN.md\">Singleton</a></td>\n<td>Ensure a class has only one instance, and provide a global point of access to it.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"structural-patterns\">Structural patterns</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Adapter_pattern\">Adapter</a> or Wrapper or Translator</td>\n<td>Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Bridge_pattern\">Bridge</a></td>\n<td>Decouple an abstraction from its implementation allowing the two to vary independently.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Composite_pattern\">Composite</a></td>\n<td>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">Decorator</a></td>\n<td>Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/FACADE_PATTERN.md\">Facade</a></td>\n<td>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Flyweight_pattern\">Flyweight</a></td>\n<td>Use sharing to support large numbers of similar objects efficiently.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Front_controller\">Front controller</a></td>\n<td>The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Marker_interface_pattern\">Marker</a></td>\n<td>Empty interface to associate metadata with a class.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/MODULE_PATTERN.md\">Module</a></td>\n<td>Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\">Proxy</a></td>\n<td>Provide a surrogate or placeholder for another object to control access to it.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Twin_pattern\">Twin</a></td>\n<td>Twin allows modeling of multiple inheritance in programming languages that do not support this feature.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"behavioural-patterns\">Behavioural patterns</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Blackboard_design_pattern\">Blackboard</a></td>\n<td>Artificial intelligence pattern for combining disparate sources of data (see blackboard system)</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Chain_of_responsibility_pattern\">Chain of responsibility</a></td>\n<td>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Command_pattern\">Command</a></td>\n<td>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Interpreter_pattern\">Interpreter</a></td>\n<td>Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Iterator_pattern\">Iterator</a></td>\n<td>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/MEDIATOR_PATTERN.md\">Mediator</a></td>\n<td>Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Memento_pattern\">Memento</a></td>\n<td>Without violating encapsulation, capture and externalize an object’s internal state allowing the object to be restored to this state later.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Null_Object_pattern\">Null object</a></td>\n<td>Avoid null references by providing a default object.</td>\n</tr>\n<tr>\n<td><a href=\"/_glossary/OBSERVER_PATTERN.md\">Observer</a> or <a href=\"https://en.wikipedia.org/wiki/Publish/subscribe\">Publish/subscribe</a></td>\n<td>Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Design_pattern_Servant\">Servant</a></td>\n<td>Define common functionality for a group of classes.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Specification_pattern\">Specification</a></td>\n<td>Recombinable business logic in a Boolean fashion.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/State_pattern\">State</a></td>\n<td>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\">Strategy</a></td>\n<td>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Template_method_pattern\">Template method</a></td>\n<td>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor</a></td>\n<td>Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"concurrency-patterns\">Concurrency patterns</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Active_object\">Active Object</a></td>\n<td>Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Balking_pattern\">Balking</a></td>\n<td>Only execute an action on an object when the object is in a particular state.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Binding_properties_pattern\">Binding properties</a></td>\n<td>Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Block_chain_(database\">Block chain</a>)</td>\n<td>Decentralized way to store data and agree on ways of processing it in a Merkle tree, optionally using Digital signature for any individual contributions.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Double_checked_locking_pattern\">Double-checked locking</a></td>\n<td>Reduce the overhead of acquiring a lock by first testing the locking criterion (the “lock hint”) in an unsafe manner; only if that succeeds does the actual locking logic proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Event-Based_Asynchronous_Pattern\">Event-based asynchronous</a></td>\n<td>Addresses problems with the asynchronous pattern that occur in multithreaded programs.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Guarded_suspension\">Guarded suspension</a></td>\n<td>Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Join-pattern\">Join</a></td>\n<td>Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Lock_(computer_science\">Lock</a>)</td>\n<td>One thread puts a “lock” on a resource, preventing other threads from accessing or modifying it.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Messaging_pattern\">Messaging design pattern (MDP)</a></td>\n<td>Allows the interchange of information (i.e. messages) between components and applications.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Monitor_(synchronization\">Monitor object</a>)</td>\n<td>An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Reactor_pattern\">Reactor</a></td>\n<td>A reactor object provides an asynchronous interface to resources that must be handled synchronously.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Read/write_lock_pattern\">Read-write lock</a></td>\n<td>Allows concurrent read access to an object, but requires exclusive access for write operations.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Scheduler_pattern\">Scheduler</a></td>\n<td>Explicitly control when threads may execute single-threaded code.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Thread_pool_pattern\">Thread pool</a></td>\n<td>A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern.</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Thread-Specific_Storage\">Thread-specific storage</a></td>\n<td>Static or “global” memory local to a thread.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"documentation\">Documentation</h2>\n<p>The documentation for a design pattern describes the context in which the pattern is used, the forces within the context that the pattern seeks to resolve, and the suggested solution. There is no single, standard format for documenting design patterns. Rather, a variety of different formats have been used by different pattern authors. However, according to Martin Fowler, certain pattern forms have become more well-known than others, and consequently become common starting points for new pattern-writing efforts. One example of a commonly used documentation format is the one used by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides (collectively known as the “Gang of Four”, or GoF for short) in their book Design Patterns. It contains the following sections:</p>\n<ul>\n<li><strong>Pattern Name and Classification</strong>: A descriptive and unique name that helps in identifying and referring to the pattern.</li>\n<li><strong>Intent</strong>: A description of the goal behind the pattern and the reason for using it.</li>\n<li><strong>Also Known As</strong>: Other names for the pattern.</li>\n<li><strong>Motivation (Forces)</strong>: A scenario consisting of a problem and a context in which this pattern can be used.</li>\n<li><strong>Applicability</strong>: Situations in which this pattern is usable; the context for the pattern.</li>\n<li><strong>Structure</strong>: A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose.</li>\n<li><strong>Participants</strong>: A listing of the classes and objects used in the pattern and their roles in the design.</li>\n<li><strong>Collaboration</strong>: A description of how classes and objects used in the pattern interact with each other.</li>\n<li><strong>Consequences</strong>: A description of the results, side effects, and trade offs caused by using the pattern.</li>\n<li><strong>Implementation</strong>: A description of an implementation of the pattern; the solution part of the pattern.</li>\n<li><strong>Sample Code</strong>: An illustration of how the pattern can be used in a programming language.</li>\n<li><strong>Known Uses</strong>: Examples of real usages of the pattern.</li>\n<li><strong>Related Patterns</strong>: Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns.</li>\n</ul>\n<hr>\n<p><em>Source:</em></p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Software_design_pattern\">Software design pattern</a><em>. From Wikipedia, the free encyclopedia.</em></li>\n</ul>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/DESIGN_PATTERNS.md"
  },
  {
    "name": "DOM",
    "description": "a platform- and language-neutral interface that allow programs and scripts to dynamically access and update the content, structure and style of documents",
    "markdown": "\n\n# DOM\n\n[DOM](http://www.w3.org/DOM/) (for Document Object Model) is a platform- and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents. The document can be further processed and the results of that processing can be incorporated back into the presented page. This is an overview of DOM-related materials here at W3C and around the web.\n",
    "html": "<h1 id=\"dom\">DOM</h1>\n<p><a href=\"http://www.w3.org/DOM/\">DOM</a> (for Document Object Model) is a platform- and language-neutral interface that will allow programs and scripts to dynamically access and update the content, structure and style of documents. The document can be further processed and the results of that processing can be incorporated back into the presented page. This is an overview of DOM-related materials here at W3C and around the web.</p>\n",
    "url": "https://github.com/HugoGiraudel/SJSJ/blob/master/_glossary/DOM.md"
  }
]
